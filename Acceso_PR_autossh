#!/bin/bash

## Uso: ./Acceso_PR_autossh
## Si el script falla, borar todos los archivos "script_returning_passXXXXXX" 
## en los que tengas permisos, ya que contienen tus contraseñas (tiene permisos -rwx------)

## funcion de limpieza
borrar_temp() { 
    rm ${SSH_ASKPASS_SCRIPT}; unset SSH_ASKPASS; passwdPR=''
    rm ${SSH_ASKPASS_SCRIPT_2}; unset SSH_ASKPASS_2; passwd='';
    unset DISPLAY
}

## LogLevel error is to suppress the hosts warning. The others are
## necessary if working with development servers with self-signed
## certificates.
SSH_OPTIONS="-oLogLevel=error"
SSH_OPTIONS="${SSH_OPTIONS} -oStrictHostKeyChecking=no"
SSH_OPTIONS="${SSH_OPTIONS} -oUserKnownHostsFile=/dev/null"
SSH_OPTIONS="${SSH_OPTIONS} -o ConnectTimeout=3"


## Read Pasword from promt
## save original terminal setting.
stty_orig=`stty -g`
## turn-off echoing.
stty -echo
## read the password
read -p "Contraseña Temporal de PR: " passwdPR
echo
read -p "Contraseña corporativa: " passwd
echo
## restore terminal setting.
stty $stty_orig

## Tell SSH to read in the output of the provided script as the password.
## We still have to use setsid to eliminate access to a terminal and thus avoid
## it ignoring this and asking for a password.
SSH_ASKPASS_SCRIPT="$(pwd)/script_returning_pass$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c6)"
SSH_ASKPASS_SCRIPT_2="$(pwd)/script_returning_pass_2$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c6)"

## Create a temp script to echo the SSH password, used by SSH_ASKPASS
echo "echo $passwdPR" > ${SSH_ASKPASS_SCRIPT}
chmod 700 ${SSH_ASKPASS_SCRIPT}

echo "echo $passwd" > ${SSH_ASKPASS_SCRIPT_2}
chmod 700 ${SSH_ASKPASS_SCRIPT_2}


## Tell SSH to read in the output of the provided script as the password.
## We still have to use setsid to eliminate access to a terminal and thus avoid
## it ignoring this and asking for a password.
export SSH_ASKPASS=${SSH_ASKPASS_SCRIPT}

## Set no display, necessary for ssh to play nice with setsid and SSH_ASKPASS.
export DISPLAY=dummydisplay:0


# login="$(id -u -n)"
login=$(whoami)
HostEEPP="ldsrv401 ldsrv402 lisrv401 lisrv402"
HostPR="lpsrp301 lpsrp302 lppxp301 lppxp302 lpsro301 
lpsro302 lpsrn301 lpsrn302 lpsrm301 lpsrm302 lpsri301 
lpsri302 lpsrv301 lpsrv302 lpsrv303 lpsrv304 lpsrv305 
lpsrv306 lpsrv307 lpsrv308 lpsrv309 lpsrv310 lpsrv311 
lpsrv312 lpsrv313 lpsrv314 lpsgl301 lpsgl302 LPSRG301 
lpevn301 lpevn302 lpevn303 lpevn304 lpmqr301 lpmqr302 
lppxb301 lppxb302 lppxb303 lppxo301 lppxo302 lppxo303 
lppxo304 lppxo305 lppxr301 lppxr302 lpsrg302 lpsrl301 
lpsrl302 lpsrv317 lpsrv318"
HostPR2="LGSRV401 LGSRV402"

errores=0
resultado=''
for host in $HostPR; do
    if [[ $error -eq 3 ]]; then
        echo "Se finaliza la comprobación debido a que se han producido $error errores."
        echo "Revise la contraseña temporal introducida, ya que es erronea"
        echo "Espere unos minutos antes de ejecutar el script si se han producido muchos intentos fallidos"
        borrar_temp
        exit
    fi
    # estado='KO'
    # setsid ssh $SSH_OPTIONS $login@$host "echo 2>&1" && echo "  $(hostname) OK" && estado="OK" || echo "  $host NOK"
    estado=$(setsid ssh $SSH_OPTIONS $login@$host echo ok 2>&1)
    estadoSSH=$(setsid ssh $SSH_OPTIONS $login@$host echo ok 2>&1)
    if [[ $estadoSSH == ok ]] ; then
        estado="OK"; echo "  $host $estado"
    elif [[ $estadoSSH == "Permission denied"* ]] ; then
        estado="KO  Permiso denegado"; echo "  $host $estado"
        error=$((error+1));
    else
        estado="KO"; echo "  $host $estado !"
    fi
    resultado=$(printf '%s\n %s\t %s\n' "$resultado" "$host" "$estado")
done

export SSH_ASKPASS=${SSH_ASKPASS_SCRIPT_2}
for host in $HostPR2; do
    # estado='KO'
    # setsid ssh $SSH_OPTIONS $login@$host "echo 2>&1" && echo "  $(hostname) OK" && estado="OK" || echo "  $host NOK"
    estado=$(setsid ssh $SSH_OPTIONS $login@$host echo ok 2>&1)
    estadoSSH=$(setsid ssh $SSH_OPTIONS $login@$host echo ok 2>&1)
    if [[ $estadoSSH == ok ]] ; then
        estado="OK"; echo "  $host $estado"
    elif [[ $estadoSSH == "Permission denied"* ]] ; then
        estado="KO  Permiso denegado"; echo "  $host $estado"
    else
        estado="KO"; echo "  $host $estado"
    fi
    resultado=$(printf '%s\n %s\t %s\n' "$resultado" "$host" "$estado")
done


echo ''
printf '\n%s %s\n' "Resumen de Acceso a Servidores" "$resultado"


## Borrado de los archivos temporales
borrar_temp

